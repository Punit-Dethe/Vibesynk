# AI Radio App Development Prompt

## Project Overview
Build an AI-powered radio web application that creates personalized radio shows by analyzing user's Spotify playlists, using AI to generate radio host commentary, and seamlessly mixing music with AI-generated speech using intelligent crossfading.

## Tech Stack
- **Frontend**: React with Vite, Tailwind  ( now just using basic css and react )
- **Backend**: Node.js with Express
- **Base Repository**: Start with Spotify's official `spotify-web-playback-sdk-example`
- **APIs**: Spotify Web API, Spotify Web Playback SDK, Google Gemini API, Text-to-Speech API (11 Labs or Google TTS)

## Core Functionality Flow

### Phase 1: Spotify Integration & Music Analysis
1. **User Authentication**: 
   - Integrate Spotify OAuth using the official example's auth flow
   - Request scopes: `streaming`, `user-read-email`, `user-read-private`, `user-read-playback-state`, `user-modify-playback-state`, `playlist-read-private`, `user-library-read`

2. **Playlist & Track Analysis**:
   - Fetch user's playlists via Spotify Web API
   - Allow user to select a playlist for radio generation
   - For selected playlist, get first 10-20 songs with complete track analysis data:
     - Track name, artist, album
     - Audio features: BPM, energy level, danceability, valence, acousticness, genre
     - Track duration and preview URL
     - Popularity score

### Phase 2: AI Content Generation Pipeline
3. **Gemini AI Integration**:
   - Send batch of 10-20 songs with all Spotify metadata to Gemini API
   - **AI Prompt Template**: "Analyze these songs and provide: 1) Best 30-60 second segment timestamp for each song (start_time, end_time), 2) Radio host commentary for 3-4 strategic points between songs including fun facts, weather, music trivia, artist information, or connecting themes between songs. Match the energy and mood of the music. Keep commentary natural and engaging, 15-30 seconds each."
   - Gemini returns structured JSON with:
     ```json
     {
       "songs": [
         {
           "track_id": "spotify_id",
           "best_segment": {"start": 45, "end": 105},
           "commentary_before": "radio host text"
         }
       ],
       "radio_segments": [
         {"position": "after_song_2", "text": "commentary text", "type": "fun_fact"}
       ]
     }
     ```

4. **Text-to-Speech Conversion**:
   - Send all AI-generated radio commentary to TTS API (11 Labs or Google TTS)
   - Generate audio files for each commentary segment  
   - Store generated audio files temporarily with metadata (duration, file_path)
   - Pre-calculate exact duration of each speech segment for seamless transitions

### Phase 3: Audio Playback & Crossfading System
5. **Background Music Library**:
   - Create local collection of royalty-free background tracks
   - Categorize by: genre, BPM range, energy level, mood
   - Implement matching algorithm to select background music similar to upcoming song

6. **Intelligent Audio Mixing**:
   - Use Web Audio API for precise audio control
   - Create dual audio contexts:
     - **Primary**: Spotify track playback (using SDK seek function for best segments)
     - **Secondary**: Background music + radio host speech overlay
   - **Crossfade Logic**:
     ```
     Current Song (best segment) → Fade Out to 30% volume
     Background Music Fades In → Match genre/BPM of next song  
     Radio Host Speech → Overlay on background music
     Next Song → Fade In as background fades out
     ```

7. **Seamless Transition System**:
   - Pre-load next song's best segment
   - Calculate precise timing: `current_song_end - radio_speech_duration - crossfade_time`
   - Implement smooth volume curves using `gain.linearRampToValueAtTime()`
   - Handle user interactions (skip, pause) by canceling scheduled transitions

### Phase 4: User Interface & Controls
8. **Radio Player UI**:
   - Modern radio-style interface with current song info
   - Visual progress indicator showing: song progress, upcoming radio segment, next song
   - Standard controls: play/pause, skip (skips both song and radio segment)
   - Volume control for overall mix
   - "Now playing" display with AI-generated commentary preview

9. **Playlist Management**:
   - Playlist selector dropdown
   - Real-time processing indicator during AI analysis
   - Queue visualization showing upcoming songs and radio segments

### Phase 5: Advanced Features (Future Implementation)
10. **Interactive Radio Requests**:
    - Text input box for custom requests: "tell me a joke", "what's the weather", "news update"
    - **Time Limit System**: Visual countdown (45 seconds) showing when custom requests close
    - Priority queue for custom requests vs pre-generated content
    - Real-time AI generation: User request → Gemini API → TTS → Insert into next available slot

11. **Personalization & Learning**:
    - Maintain chat history with Gemini to learn user preferences
    - Track user reactions (skip rates, favorite commentary types)
    - Dynamic personality adjustment (funny, informative, chill, energetic)
    - Song recommendation system based on listening patterns

## Technical Implementation Details

### Backend API Endpoints
```
POST /api/auth/spotify - Spotify OAuth
GET /api/playlists - Fetch user playlists  
POST /api/analyze-playlist - Send tracks to Gemini for analysis
POST /api/generate-radio - Create TTS for radio segments
GET /api/background-music - Get matching background track
POST /api/custom-request - Handle real-time user requests
```

### Frontend State Management
- Spotify player state (current song, position, volume)
- Radio segments queue and timing
- AI processing status
- Audio context and crossfade controllers
- User preferences and settings

### Error Handling & Fallbacks
- API rate limiting management
- Fallback content when AI generation fails
- Offline mode with pre-generated content
- Network error recovery
- Spotify Premium requirement handling

### Performance Optimizations
- Background processing of next 10-20 songs while current batch plays
- Audio file caching and cleanup
- Lazy loading of background music library
- WebWorker for AI API calls to prevent UI blocking

## Development Approach
1. Start with the official Spotify Web Playback SDK example
2. First get basic Spotify playback working
3. Add backend endpoints for playlist fetching
4. Implement Gemini AI integration for content generation
5. Build TTS pipeline for radio segments
6. Develop Web Audio API crossfading system
7. Create radio player UI
8. Add advanced features incrementally

## Success Metrics
- Smooth, uninterrupted audio transitions
- Contextually relevant AI commentary
- Sub-2 second response time for user interactions
- Stable playback across different browsers
- Engaging radio experience that enhances music discovery

Build this as a production-ready web application with clean, maintainable code, proper error handling, and excellent user experience. Focus on audio quality and seamless transitions as core differentiators.